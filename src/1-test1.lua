print("hello world\n")

-- var declare
str1 = "hello world\n"
print(str1)

-- delete a var
str1 = nil
print(str1)

    


--[[
## 前言
* lua 是一个小众化的脚本语言。但它却频繁出现在 web 开发领域。这是为什么呢？我们一起进入 lua 的世界，了解具体原因。
* 它不像 Rust，不像 c 那样，需要有 main 函数。它也不像 PHP 那样需要文本标记 `<?php ?>`，只需要在源码文件中直接写源代码，配上解释器，即可执行。到这里，已经感受到了它的简洁。

## lua 版的 hello world
* lua 版的 hello world 很简单，只需调用 print，甚至连语句结尾的分号都可以不用：

```lua
print("hello world")
```

### 运行 lua 脚本
* 假定你已经安装好了 lua 解释器。那么直接以 `lua {文件名}` 的方式就能运行你的 lua 脚本。例如：`lua test.lua`

### 注释
* 不得不提一下，我个人喜欢在源代码下做一些记录和笔记，但是一开始在 lua 文件中使用 `/* */` 进行注释时，发现行不通。原来 lua 的注释和其他语言不太一样

### 单行注释
* lua 中的单行注释，可以使用 `--`，也就是两个中横线

### 多行注释
* lua 中的多行注释使用 `--[[` 作为开始，使用 `--\]\]` (不需要两个反引号！这里是为了转义，否则会提前结束这里的注释)作为结束
* 在网站的评论中看到一个[网友的笔记](https://www.runoob.com/lua/lua-basic-syntax.html)，给出了多行注释的另一种方法：`--[=[注释内容]=]`


## 标识符
* lua 中的标识符的定义和其它语言类似：
>* Lua 标示符用于定义一个变量，函数获取其他用户定义的项。标示符以一个字母 A 到 Z 或 a 到 z 或下划线 _ 开头后加上0个或多个字母，下划线，数字（0到9）。
>* 最好不要使用下划线加大写字母的标示符，因为Lua的保留字也是这样的。
>* Lua 不允许使用特殊字符如 @, $, 和 % 来定义标示符。 Lua 是一个区分大小写的编程语言。因此在 Lua 中 Runoob 与 runoob 是两个不同的标示符。
>* 一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。

### 定义全局变量
* lua 中定义全局变量都不用关键字，直接使用将变量初始化即可。并且，在默认情况下，变量总是认为是全局的。
* 如果删除一个全局变量，只需要将变量赋值为nil。

```lua
-- var declare
str1 = "hello world\n"
print(str1)

-- delete a var
str1 = nil
print(str1)
```

>换句话说, 当且仅当一个变量不等于nil时，这个变量即存在。




## 命令行
* lua 的命令行交互式编程中，使用 `lua` 即可进入编程模式。
* 使用 `ctrl + d` 或者 `ctrl + c` 可退出编程模式


--]]

--[=[
## 另一种多行注释

]=]
